<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Multifunctional Calculator</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: #f4f4f4;
            margin: 0;
            padding: 0;
        }
        .calculator-container {
            max-width: 400px;
            margin: 40px auto;
            background: #fff;
            border-radius: 12px;
            box-shadow: 0 4px 16px rgba(0,0,0,0.1);
            padding: 24px 20px 20px 20px;
        }
        .mode-switch {
            display: flex;
            justify-content: center;
            margin-bottom: 18px;
        }
        .mode-switch button {
            background: #e0e0e0;
            border: none;
            padding: 8px 18px;
            margin: 0 4px;
            border-radius: 6px;
            cursor: pointer;
            font-weight: bold;
            transition: background 0.2s;
        }
        .mode-switch button.active {
            background: #1976d2;
            color: #fff;
        }
        .display {
            width: 100%;
            height: 48px;
            background: #222;
            color: #fff;
            font-size: 1.5em;
            border-radius: 6px;
            margin-bottom: 14px;
            text-align: right;
            padding: 10px;
            box-sizing: border-box;
            letter-spacing: 1px;
            overflow-x: auto;
        }
        .buttons {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
        }
        .buttons button {
            padding: 18px 0;
            font-size: 1.1em;
            border: none;
            border-radius: 6px;
            background: #f0f0f0;
            cursor: pointer;
            transition: background 0.2s;
        }
        .buttons button.operator {
            background: #1976d2;
            color: #fff;
        }
        .buttons button.equal {
            background: #43a047;
            color: #fff;
            grid-column: span 2;
        }
        .buttons button.clear {
            background: #e53935;
            color: #fff;
        }
        .history {
            margin-top: 18px;
            background: #fafafa;
            border-radius: 6px;
            padding: 10px;
            max-height: 100px;
            overflow-y: auto;
            font-size: 0.95em;
        }
        .history-title {
            font-weight: bold;
            margin-bottom: 6px;
        }
        .fun-facts {
            margin-top: 18px;
            background: #e3f2fd;
            border-radius: 6px;
            padding: 10px;
            font-size: 0.95em;
        }
        .fun-facts-title {
            font-weight: bold;
            margin-bottom: 6px;
        }
    </style>
</head>
<body>
    <div class="calculator-container">
        <div class="mode-switch">
            <button id="proModeBtn" class="active">Professional</button>
            <button id="kidsModeBtn">Kids</button>
        </div>
        <div class="display" id="display">0</div>
        <div class="buttons" id="buttons">
            <!-- Buttons will be generated by JS -->
        </div>
        <div class="history" id="history" style="display:none;">
            <div class="history-title">History</div>
            <ul id="historyList" style="padding-left:18px; margin:0;"></ul>
        </div>
        <div class="fun-facts" id="funFacts" style="display:none;">
            <div class="fun-facts-title">Math Fun Fact</div>
            <div id="factText"></div>
        </div>
    </div>
    <script>
        // Button layouts for each mode
        const proButtons = [
            ['7', '8', '9', '/'],
            ['4', '5', '6', '*'],
            ['1', '2', '3', '-'],
            ['0', '.', '(', '+'],
            ['sin', 'cos', 'tan', '^'],
            ['√', 'π', 'e', ')'],
            ['C', 'DEL', '=', 'HIST']
        ];
        const kidsButtons = [
            ['7', '8', '9', '+'],
            ['4', '5', '6', '-'],
            ['1', '2', '3', '×'],
            ['0', '.', '=', '÷'],
            ['C', 'DEL', 'FACT', '']
        ];

        // Fun facts for kids mode
        const funFacts = [
            "Zero is the only number that can't be represented in Roman numerals.",
            "A 'googol' is the number 1 followed by 100 zeros!",
            "Did you know? 2 and 5 are the only primes that end with 2 or 5.",
            "The number 9 is called a 'magic number' because the sum of the digits of its multiples is always 9.",
            "A circle has 360 degrees because the Babylonians used base 60.",
            "Pi (π) is an irrational number, which means it never ends or repeats!",
            "The word 'hundred' comes from the old Norse term, 'hundrath', which actually means 120.",
            "A triangle's angles always add up to 180 degrees."
        ];

        let mode = 'pro'; // 'pro' or 'kids'
        let display = document.getElementById('display');
        let buttonsDiv = document.getElementById('buttons');
        let historyDiv = document.getElementById('history');
        let historyList = document.getElementById('historyList');
        let funFactsDiv = document.getElementById('funFacts');
        let factText = document.getElementById('factText');
        let currentInput = '';
        let history = [];

        function renderButtons() {
            buttonsDiv.innerHTML = '';
            let layout = (mode === 'pro') ? proButtons : kidsButtons;
            layout.forEach(row => {
                row.forEach(btn => {
                    if (btn === '') return;
                    let button = document.createElement('button');
                    button.textContent = btn;
                    if (['+', '-', '*', '/', '^', '×', '÷'].includes(btn)) button.classList.add('operator');
                    if (btn === '=') button.classList.add('equal');
                    if (btn === 'C') button.classList.add('clear');
                    button.addEventListener('click', () => handleButton(btn));
                    buttonsDiv.appendChild(button);
                });
            });
        }

        function updateDisplay(val) {
            display.textContent = val;
        }

        function handleButton(val) {
            if (val === 'C') {
                currentInput = '';
                updateDisplay('0');
            } else if (val === 'DEL') {
                currentInput = currentInput.slice(0, -1);
                updateDisplay(currentInput || '0');
            } else if (val === '=') {
                try {
                    let result = evaluate(currentInput);
                    if (result !== undefined) {
                        // Fix: Show up to 10 decimal places for floats, remove trailing zeros
                        let resultStr = (typeof result === "number" && !Number.isInteger(result))
                            ? parseFloat(result.toFixed(10)).toString()
                            : result.toString();
                        updateDisplay(resultStr);
                        if (mode === 'pro') {
                            history.unshift(currentInput + ' = ' + resultStr);
                            if (history.length > 10) history.pop();
                            renderHistory();
                        }
                        currentInput = resultStr;
                    }
                } catch (e) {
                    updateDisplay('Error');
                    currentInput = '';
                }
            } else if (val === 'HIST' && mode === 'pro') {
                historyDiv.style.display = historyDiv.style.display === 'none' ? 'block' : 'none';
            } else if (val === 'FACT' && mode === 'kids') {
                showFunFact();
            } else if (['sin', 'cos', 'tan', '√', 'π', 'e'].includes(val)) {
                if (val === 'π') {
                    currentInput += Math.PI.toFixed(8);
                } else if (val === 'e') {
                    currentInput += Math.E.toFixed(8);
                } else if (val === '√') {
                    currentInput += 'sqrt(';
                } else {
                    currentInput += val + '(';
                }
                updateDisplay(currentInput);
            } else if (val === '×') {
                currentInput += '*';
                updateDisplay(currentInput.replace(/\*/g, '×'));
            } else if (val === '÷') {
                currentInput += '/';
                updateDisplay(currentInput.replace(/\//g, '÷'));
            } else {
                currentInput += val;
                updateDisplay(
                    (mode === 'kids' ? currentInput.replace(/\*/g, '×').replace(/\//g, '÷') : currentInput)
                );
            }
        }

        function evaluate(expr) {
            // Replace math functions and constants
            let safeExpr = expr
                .replace(/π/g, Math.PI)
                .replace(/e/g, Math.E)
                .replace(/sqrt\(/g, 'Math.sqrt(')
                // Fix: Only replace sin/cos/tan if followed by a parenthesis
                .replace(/sin\s*\(/g, 'Math.sin(toRadians(')
                .replace(/cos\s*\(/g, 'Math.cos(toRadians(')
                .replace(/tan\s*\(/g, 'Math.tan(toRadians(')
                .replace(/\^/g, '**');
            // Only allow safe characters (allow Math, ., digits, operators, parentheses, spaces, commas, toRadians)
            if (!/^[\d+\-*/().,MathPIE\s*toRadians]*$/.test(safeExpr)) throw 'Unsafe input';
            // Add closing parenthesis for sin/cos/tan if missing
            let open = (safeExpr.match(/\(/g) || []).length;
            let close = (safeExpr.match(/\)/g) || []).length;
            while (close < open) {
                safeExpr += ')';
                close++;
            }
            // Evaluate
            // eslint-disable-next-line no-new-func
            // Fix: Provide toRadians function and Math as context
            return Function('toRadians', 'Math', 'return ' + safeExpr)(x => x * Math.PI / 180, Math);
        }

        function renderHistory() {
            historyList.innerHTML = '';
            history.forEach(item => {
                let li = document.createElement('li');
                li.textContent = item;
                historyList.appendChild(li);
            });
        }

        function showFunFact() {
            let idx = Math.floor(Math.random() * funFacts.length);
            factText.textContent = funFacts[idx];
            funFactsDiv.style.display = 'block';
            setTimeout(() => {
                funFactsDiv.style.display = 'none';
            }, 5000);
        }

        // Mode switching
        document.getElementById('proModeBtn').onclick = function() {
            mode = 'pro';
            this.classList.add('active');
            document.getElementById('kidsModeBtn').classList.remove('active');
            historyDiv.style.display = 'none';
            funFactsDiv.style.display = 'none';
            currentInput = '';
            updateDisplay('0');
            renderButtons();
        };
        document.getElementById('kidsModeBtn').onclick = function() {
            mode = 'kids';
            this.classList.add('active');
            document.getElementById('proModeBtn').classList.remove('active');
            historyDiv.style.display = 'none';
            funFactsDiv.style.display = 'none';
            currentInput = '';
            updateDisplay('0');
            renderButtons();
        };

        // Initial render
        renderButtons();
    </script>
</body>
</html>
